package team3176.robot.subsystems.superstructure;

import java.util.function.DoubleSupplier;
import edu.wpi.first.math.MathUtil;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.wpilibj.smartdashboard.Mechanism2d;
import edu.wpi.first.wpilibj.smartdashboard.MechanismLigament2d;
import edu.wpi.first.wpilibj.smartdashboard.MechanismRoot2d;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.util.Color;
import edu.wpi.first.wpilibj.util.Color8Bit;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.FunctionalCommand;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import team3176.robot.constants.SuperStructureConstants;
import team3176.robot.Constants;
import team3176.robot.Constants.Mode;
import org.littletonrobotics.junction.Logger;

public class Arm extends SubsystemBase {
    private static Arm instance;
    private final ArmIO io;
    private final ArmIOInputsAutoLogged inputs = new ArmIOInputsAutoLogged();
        
    private final PIDController turningPIDController;
    public enum States {OPEN_LOOP,CLOSED_LOOP}
    private States currentState = States.OPEN_LOOP;
    private double armSetpointAngleRaw = SuperStructureConstants.ARM_ZERO_POS;
    private Mechanism2d mech = new Mechanism2d(10,10);
    private MechanismRoot2d root = mech.getRoot("armRoot", 5, 5);
    private MechanismLigament2d armSholder = root.append(new MechanismLigament2d("armLigament",2,90));
    private MechanismLigament2d simSholder = root.append(new MechanismLigament2d("simLigament",3,90,10,new Color8Bit(Color.kAqua)));
    private MechanismLigament2d armElbow = armSholder.append(new MechanismLigament2d("armELigament",2,90));
    private Arm(ArmIO io) {
        this.io = io;
        this.turningPIDController = new PIDController(SuperStructureConstants.ARM_kP, SuperStructureConstants.ARM_kI, SuperStructureConstants.ARM_kD);
        SmartDashboard.putNumber("Arm_kp", SuperStructureConstants.ARM_kP);
        SmartDashboard.putNumber("Arm_Kg", SuperStructureConstants.ARM_kg);
        setArmPidPosMode();
    }

    public void setCoastMode() {
        io.setCoastMode(true);
    }

    public void setBrakeMode() {
        io.setCoastMode(false);
    } 

    private void setArmPidPosMode() {

        this.turningPIDController.setTolerance(SuperStructureConstants.ARM_TOLERANCE);
        //this.m_turningPIDController.enableContinuousInput() 
        this.turningPIDController.reset();
        this.turningPIDController.setP(SuperStructureConstants.ARM_kP);
        this.turningPIDController.setI(SuperStructureConstants.ARM_kI);
        this.turningPIDController.setD(SuperStructureConstants.ARM_kD);
        //this.m_turningPIDController.enableContinuousInput(0, 360);
    }

    public static Arm getInstance() {
        if (instance == null){
            if(Constants.getMode() != Mode.SIM) {
                instance = new Arm(new ArmIOSpark() {});
            } else {
                instance = new Arm(new ArmIOSim() {});
            }
            
        }
        return instance;
    }
    
    /**
     * 
     * @param desiredAngle in degrees in Encoder Frame
     */
    private void setPIDPosition(double desiredAngle) {
        //need to double check these values
        
        //double physicsAngle = (desiredAngle - SuperStructureConstants.ARM_CARRY_POS);
        
        //kg is the scalar representing the percent power needed to hold the arm at 90 degrees away from the robot
        //double kg = SmartDashboard.getNumber("Arm_Kg", SuperStructureConstants.ARM_kg);
        // kp set as the fraction of control effort / error to cause control effort
        // for example .4 output is generated by a 40 degree error
        double kp = SmartDashboard.getNumber("Arm_kp", SuperStructureConstants.ARM_kP);
        turningPIDController.setP(kp);
        double feedForward = 0.0;//kg * physicsAngle/SuperStructureConstants.ARM_HIGH_POS;
        if (inputs.Position < SuperStructureConstants.ARM_MID_POS + 10){
            feedForward =0.0;
        } else if (desiredAngle < SuperStructureConstants.ARM_ZERO_POS+5) {
            feedForward = -.2;
        }
        double turnOutput = turningPIDController.calculate(inputs.Position, desiredAngle);
        turnOutput = MathUtil.clamp(turnOutput,-1,1);
        io.set(turnOutput + feedForward);
        SmartDashboard.putNumber("Arm_Output", turnOutput + feedForward);
        SmartDashboard.putNumber("Arm Feed Forward", feedForward);
    }
    public void armAnalogUp() {
        this.currentState = States.OPEN_LOOP;
        io.set(SuperStructureConstants.ARM_OUTPUT_POWER);
    }
    public void armAnalogDown() {
        this.currentState = States.OPEN_LOOP;
        io.set(-SuperStructureConstants.ARM_OUTPUT_POWER);
        //System.out.println("Arm Analog Down"); 
        //System.out.println("Arm_Abs_Position: " + armEncoder.getAbsolutePosition()); 
        //System.out.println("Arm_Rel_Position: " + armEncoder.getPosition());
    }
    public void idle() {
        io.set(0.0);
    }
    public void fineTune(double delta) {
        this.currentState = States.CLOSED_LOOP;
        this.armSetpointAngleRaw -= delta * 0.5;
        
    }
    public double getArmPosition() {
        return inputs.Position;
    }
    public boolean isArmAtPosition() {
        return Math.abs(this.turningPIDController.getPositionError()) < 7;
    }
    /**
     * to be used for trajectory following without disrupting other commands
     * @param setpointAngle
     */
    public void setAngleSetpoint(double setpointAngle) {
        this.currentState = States.CLOSED_LOOP;
        this.armSetpointAngleRaw = setpointAngle;
    }
    /*
     * Commands
     */
    public Command armSetPosition(double angleInDegrees) {
        SmartDashboard.putNumber("armSetPosition",angleInDegrees);
        return this.run(() -> setPIDPosition(angleInDegrees)).withName("armSetPosition"+angleInDegrees);
    }
    public Command armSetPositionBlocking(double angleInDegrees) {
        return new FunctionalCommand(() -> {
            this.currentState = States.CLOSED_LOOP;
            this.armSetpointAngleRaw = angleInDegrees;}, 
            ()-> {}, 
            b -> {}, 
            this::isArmAtPosition, 
            this).withName("armsetPositionBlocking");
    }
    public Command armSetPositionOnce(double angleInDegrees) {
        return this.runOnce(() -> {
            this.currentState = States.CLOSED_LOOP;
            this.armSetpointAngleRaw = angleInDegrees;}).withName("armSetPosition"+angleInDegrees);
    }
    public Command armFineTune(DoubleSupplier angleDeltaCommand) {
        return this.run(() -> fineTune(angleDeltaCommand.getAsDouble())).withName("armFineTune");
    }
    public Command armAnalogUpCommand() {
        return this.runEnd(this::armAnalogUp, this::idle);
    }
    public Command armAnalogDownCommand() {
        return this.runEnd(this::armAnalogDown, this::idle);
    }
    
    
    @Override
    public void periodic() {
        io.updateInputs(inputs);
        Logger.getInstance().processInputs("Arm", inputs);
        armSholder.setAngle(Rotation2d.fromDegrees(inputs.Position-SuperStructureConstants.ARM_ZERO_POS-190));
        armElbow.setAngle(Rotation2d.fromDegrees(20 + 100 * (SuperStructureConstants.ARM_HIGH_POS - inputs.Position)/(SuperStructureConstants.ARM_HIGH_POS-SuperStructureConstants.ARM_ZERO_POS)));
        simSholder.setAngle(Rotation2d.fromDegrees(inputs.Position -90 - SuperStructureConstants.ARM_SIM_OFFSET));
        Logger.getInstance().recordOutput("Arm/mech2d", mech);
        //SmartDashboard.putNumber("Arm_Position", armEncoder.getAbsolutePosition());
        //SmartDashboard.putNumber("Arm_Position_Relative", armEncoder.getAbsolutePosition() - SuperStructureConstants.ARM_ZERO_POS);
        if(this.currentState == States.CLOSED_LOOP) {
            this.armSetpointAngleRaw = MathUtil.clamp(this.armSetpointAngleRaw, SuperStructureConstants.ARM_ZERO_POS, SuperStructureConstants.ARM_HIGH_POS);
            Logger.getInstance().recordOutput("Arm/position_error", this.turningPIDController.getPositionError());
            setPIDPosition(armSetpointAngleRaw);
        }
    }
}
